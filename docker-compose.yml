version: "3.8"
services:
  nginx:
    container_name: nginx
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - ${APPLICATIONS}:/var/www
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/conf.d
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    links:
      - php-fpm
    expose:
      - "80"
      - "443"
    networks:
      - code-network
    extra_hosts:
      - "${HOSTS}:172.30.0.1"
    depends_on:
      - php-fpm
  php-fpm:
    container_name: php-fpm
    restart: always
    build:
      context: ./php-fpm
      args:
        - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
        - INSTALL_CALENDAR=${PHP_FPM_INSTALL_CALENDAR}
        - INSTALL_COMPOSER=${PHP_FPM_INSTALL_COMPOSER}
        - INSTALL_CURL=${PHP_FPM_INSTALL_CURL}
        - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
        - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
        - INSTALL_JSON_XML=${PHP_FPM_INSTALL_JSON_XML}
        - INSTALL_MBSTRING=${PHP_FPM_INSTALL_MBSTRING}
        - INSTALL_MCRYPT=${PHP_FPM_INSTALL_MCRYPT}
        - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGODB}
        - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
        - INSTALL_OPENSSL=${PHP_FPM_INSTALL_OPENSSL}
        - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
        - INSTALL_PDO_POSTGRESQL=${PHP_FPM_INSTALL_PDO_POSTGRESQL}
        - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
        - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
        - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
        - INSTALL_GRPC=${PHP_FPM_INSTALL_GRPC}
        - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
      dockerfile: Dockerfile
    expose:
      - "9000"
    extra_hosts:
      - "${HOSTS}:172.30.0.1"
    volumes:
      - ${APPLICATIONS}:/var/www
      - ${PHP_FPM_BASH_PATH}:/root/.bash_history
    networks:
      - code-network
  mysql:
    container_name: mysql
    command: mysqld --default-authentication-plugin=mysql_native_password
    restart: always
    build:
      context: ./mysql
      dockerfile: Dockerfile
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${MYSQL_DATA}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - code-network
  mongodb:
    container_name: "mongodb"
    restart: always
    environment:
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASS=${MONGODB_PASS}
    ports:
      - "${MONGODB_PORT}:27017"
    build:
      context: ./mongodb
      dockerfile: Dockerfile
    volumes:
      - ${MONGODB_DATA}/db:/data/db
      - ${MONGODB_DATA}/mongo_config:/data/configdb
    networks:
      - code-network
  redis:
    container_name: redis
    restart: always
    build:
      context: ./redis
      dockerfile: Dockerfile
    ports:
      - "6379:6379"
    volumes:
      - ${REDIS_DATA}:/data/redis
    networks:
      - code-network
networks:
  code-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
